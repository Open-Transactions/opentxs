// Copyright (c) 2010-2022 The Open-Transactions developers
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#include "0_stdafx.hpp"         // IWYU pragma: associated
#include "blockchain/Json.hpp"  // IWYU pragma: associated

namespace opentxs::blockchain::params
{
auto bch_json() noexcept -> std::string_view
{
    static constexpr unsigned char bytes[] = {
@OPENTXS_BCH_HEX@
    };

    return {reinterpret_cast<const char*>(bytes), sizeof(bytes)};
}

auto bsv_json() noexcept -> std::string_view
{
    static constexpr unsigned char bytes[] = {
@OPENTXS_BSV_HEX@
    };

    return {reinterpret_cast<const char*>(bytes), sizeof(bytes)};
}

auto btc_json() noexcept -> std::string_view
{
    static constexpr unsigned char bytes[] = {
@OPENTXS_BTC_HEX@
    };

    return {reinterpret_cast<const char*>(bytes), sizeof(bytes)};
}

auto eth_json() noexcept -> std::string_view
{
    static constexpr unsigned char bytes[] = {
@OPENTXS_ETH_HEX@
    };

    return {reinterpret_cast<const char*>(bytes), sizeof(bytes)};
}

auto ethropsten_json() noexcept -> std::string_view
{
    static constexpr unsigned char bytes[] = {
@OPENTXS_ETHROPSTEN_HEX@
    };

    return {reinterpret_cast<const char*>(bytes), sizeof(bytes)};
}

auto ltc_json() noexcept -> std::string_view
{
    static constexpr unsigned char bytes[] = {
@OPENTXS_LTC_HEX@
    };

    return {reinterpret_cast<const char*>(bytes), sizeof(bytes)};
}

auto pkt_json() noexcept -> std::string_view
{
    static constexpr unsigned char bytes[] = {
@OPENTXS_PKT_HEX@
    };

    return {reinterpret_cast<const char*>(bytes), sizeof(bytes)};
}

auto tnbch_json() noexcept -> std::string_view
{
    static constexpr unsigned char bytes[] = {
@OPENTXS_TNBCH_HEX@
    };

    return {reinterpret_cast<const char*>(bytes), sizeof(bytes)};
}

auto tnbsv_json() noexcept -> std::string_view
{
    static constexpr unsigned char bytes[] = {
@OPENTXS_TNBSV_HEX@
    };

    return {reinterpret_cast<const char*>(bytes), sizeof(bytes)};
}

auto tnbtc_json() noexcept -> std::string_view
{
    static constexpr unsigned char bytes[] = {
@OPENTXS_TNBTC_HEX@
    };

    return {reinterpret_cast<const char*>(bytes), sizeof(bytes)};
}

auto tnltc_json() noexcept -> std::string_view
{
    static constexpr unsigned char bytes[] = {
@OPENTXS_TNLTC_HEX@
    };

    return {reinterpret_cast<const char*>(bytes), sizeof(bytes)};
}

auto tnpkt_json() noexcept -> std::string_view
{
    static constexpr unsigned char bytes[] = {
@OPENTXS_TNPKT_HEX@
    };

    return {reinterpret_cast<const char*>(bytes), sizeof(bytes)};
}

auto tnxec_json() noexcept -> std::string_view
{
    static constexpr unsigned char bytes[] = {
@OPENTXS_TNXEC_HEX@
    };

    return {reinterpret_cast<const char*>(bytes), sizeof(bytes)};
}

auto unittest_json() noexcept -> std::string_view
{
    static constexpr unsigned char bytes[] = {
@OPENTXS_UNITTEST_HEX@
    };

    return {reinterpret_cast<const char*>(bytes), sizeof(bytes)};
}

auto xec_json() noexcept -> std::string_view
{
    static constexpr unsigned char bytes[] = {
@OPENTXS_XEC_HEX@
    };

    return {reinterpret_cast<const char*>(bytes), sizeof(bytes)};
}
}  // namespace opentxs::blockchain::params

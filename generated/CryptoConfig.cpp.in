// Copyright (c) 2010-2022 The Open-Transactions developers
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#include "0_stdafx.hpp"           // IWYU pragma: associated
#include "api/crypto/Config.hpp"  // IWYU pragma: associated

#include <frozen/bits/algorithms.h>
#include <frozen/bits/basic_types.h>
#include <frozen/unordered_map.h>
#include <utility>

#include "opentxs/api/crypto/Config.hpp"
#include "opentxs/crypto/ParameterType.hpp"
#include "opentxs/crypto/asymmetric/Algorithm.hpp"

namespace opentxs::api::crypto
{
auto HaveHDKeys() noexcept -> bool { return @OPENTXS_HAVE_HD_KEYS@; }

auto HaveSupport(opentxs::crypto::ParameterType val) noexcept -> bool
{
    using Type = opentxs::crypto::ParameterType;
    static constexpr auto map = frozen::make_unordered_map<Type, bool>({
        {Type::invalid, false},
        {Type::rsa, @OPENTXS_CRYPTO_HAVE_RSA@},
        {Type::secp256k1, @OPENTXS_CRYPTO_HAVE_SECP256K1@},
        {Type::ed25519, @OPENTXS_CRYPTO_HAVE_ED25519@},
    });

    if (const auto* i = map.find(val); map.end() != i) {

        return i->second;
    } else {

        return false;
    }
}

auto HaveSupport(opentxs::crypto::asymmetric::Algorithm val) noexcept -> bool
{
    using Type = opentxs::crypto::asymmetric::Algorithm;
    static constexpr auto map = frozen::make_unordered_map<Type, bool>({
        {Type::Error, false},
        {Type::Null, true},
        {Type::Legacy, @OPENTXS_CRYPTO_HAVE_RSA@},
        {Type::Secp256k1, @OPENTXS_CRYPTO_HAVE_SECP256K1@},
        {Type::ED25519, @OPENTXS_CRYPTO_HAVE_ED25519@},
    });

    if (const auto* i = map.find(val); map.end() != i) {

        return i->second;
    } else {

        return false;
    }
}
}  // namespace opentxs::api::crypto
